{"pages":[],"posts":[{"title":"安装Homebrew遇到connection refused问题解决及Proxifier配置","text":"问题描述刚刚从window转为macOS，很多东西需要重新配置以及熟悉。听说Homebrew是个强大的包管理器，所以用来试试看。在Homebrew官网主页复制了安装命令在终端运行时遇到了connection refused问题 问题解决由于我在境内，需要使用VPN连接，因此我使用的是V2rayU这款开源软件（github地址：https://github.com/yanue/V2rayU），查阅了用户手册后，在代理模式部分看到 全局模式: 有别于vpn,只是将代理信息更新到系统代理http,https,socks,若需要真正全局模式, 推荐搭配使用Proxifier 因此需要Proxifier搭配才能进行全局代理。 添加代理信息安装好Proxifier后还需要进行配置，打开软件，添加代理信息，选择：菜单栏–&gt;&gt;Profile–&gt;&gt;Proxy Servers。 选择add添加服务器，地址填127.0.0.1，端口一般为1080 配置完成在终端即可实现全局代理 远程DNS设置为了防止DNS污染，一般使用代理的时候都会使用远程服务器的DNS设置，具体设置方法是，菜单栏–&gt;&gt;Profile–&gt;&gt;Name Resolution。 然后选择“Resolve hostnames through proxy”即可。（一开始这个选项可能是灰色不能点，将默认的“Detect DNS seetings automatically”点掉即可） 至此，再次尝试在终端安装Homebrew即可。","link":"/2020/06/10/%E5%AE%89%E8%A3%85Homebrew%E9%81%87%E5%88%B0connection-refused%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%8F%8AProxifier%E9%85%8D%E7%BD%AE/"},{"title":"MacOS下编译RedisDesktopManagement报no file at...&#x2F;Python.framework&#x2F;...错解决方案","text":"问题描述执行命令：/Users/zzq/Qt5.9.8/5.9.8/clang_64/bin/macdeployqt rdm.app -qmldir=../../../src/qml 出错：ERROR: no file at &quot;/usr/local/opt/python/lib/Python.framework/Versions/3.7/Python&quot; 解决方案该问题是找不到Python.framework，如果你跟笔者一样是用brew安装的，那么就将/usr/local/Cellar/python/3.7.5/Frameworks下的Python.framework文件复制一份到/usr/local/Cellar/python/3.7.5/lib下就行了，我的是3.7.5版本，安装的自己到相应路径下操作即可","link":"/2020/06/29/MacOS%E4%B8%8B%E7%BC%96%E8%AF%91RedisDesktopManagement%E6%8A%A5no-file-at-Python-framework-%E9%94%99%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"},{"title":"Homebrew安装指定版本Mysql（以5.7为例）","text":"安装HomebrewHomebrew官网：https://brew.sh/安装途中可能遇到connection refused 问题，可看本人之前发的教程解决 搜索可安装版本$ brew search boost 修改环境变量brew安装的东西都是在 /usr/local/Cellar/ 本人的路径是： /usr/local/Cellar/mysql@5.7/5.7.23/bin mysql版本不同，路径会有一些不同 终端输入命令sudo vim .bash_profile 按i进入insert模式，输入：export PATH=$PATH:/usr/local/Cellar/mysql@5.7/5.7.23/bin 然后esc退出insert模式，并在最下方输入:wq保存退出。（注意“wq”前有个“:”） 生效配置文件source .bash_profile 回车执行，运行环境变量。 自动生效配置文件如果没有这一步，那么每次关掉终端在打开都需要重新source .bash_profile。首先， vi ~/.zshrc 输入： export PATH=${PATH}:/usr/local/Cellar/mysql@5.7/5.7.23/bin 保存后 source ~/.zshrc","link":"/2020/07/18/Homebrew%E5%AE%89%E8%A3%85%E6%8C%87%E5%AE%9A%E7%89%88%E6%9C%ACMysql%EF%BC%88%E4%BB%A55-7%E4%B8%BA%E4%BE%8B%EF%BC%89/"},{"title":"Homebrew安装Docker Desktop for Mac及MacOS10.15版本的镜像配置方法","text":"搜索Docker的包brew search docker 12345678910111213141516==&gt; Formulaedocker docker-machine-driver-vmwaredocker-clean docker-machine-driver-vultrdocker-completion docker-machine-driver-xhyvedocker-compose docker-machine-nfsdocker-compose-completion docker-machine-parallelsdocker-credential-helper docker-slimdocker-credential-helper-ecr docker-squashdocker-gen docker-swarmdocker-ls docker2acidocker-machine dockerizedocker-machine-completion lazydockerdocker-machine-driver-hyperkit==&gt; Casksdocker-edge homebrew/cask/docker-toolboxhomebrew/cask/docker Casks下的才是Docker Desktop可以使用命令查看信息 brew cask info docker 12345678910111213141516171819==&gt; Tapping homebrew/caskCloning into '/usr/local/Homebrew/Library/Taps/homebrew/homebrew-cask'...remote: Enumerating objects: 2, done.remote: Counting objects: 100% (2/2), done.remote: Compressing objects: 100% (2/2), done.remote: Total 452026 (delta 0), reused 0 (delta 0), pack-reused 452024Receiving objects: 100% (452026/452026), 205.09 MiB | 5.08 MiB/s, done.Resolving deltas: 100% (320412/320412), done.Tapped 1 command and 3619 casks (3,736 files, 219.9MB).docker: 2.3.0.3,45519 (auto_updates)https://www.docker.com/community-editionNot installedFrom: https://github.com/Homebrew/homebrew-cask/blob/HEAD/Casks/docker.rb==&gt; NamesDocker DesktopDocker Community EditionDocker CE==&gt; ArtifactsDocker.app (App) 安装Dockerbrew cask install docker 123456==&gt; Downloading https://desktop.docker.com/mac/stable/45519/Docker.dmg######################################################################## 100.0%==&gt; Verifying SHA-256 checksum for Cask 'docker'.==&gt; Installing Cask docker==&gt; Moving App 'Docker.app' to '/Applications/Docker.app'.🍺 docker was successfully installed! 安装完成，现在可以从启动台里找到Docker.app了，打开后会在顶部菜单栏里出现 docker logo，并且会弹出登陆界面，登陆后就能正常使用Docker Desktop for Mac了。 # 获取阿里云镜像地址 前往 [阿里云官网](https://www.aliyun.com/?spm=5176.10695662.amxosvpfn.2.26766339P4o7tB) 使用淘宝/支付宝/注册登录，进入控制台 搜索容器镜像服务 获取镜像地址 配置Docker点击小齿轮图形进入设置页面，在Docker Engine配置镜像地址 修改括号内的内容即可：&quot;registry-mirrors&quot;: [ &quot;https://********.mirror.aliyuncs.com&quot; ] 运行Docker在终端输入 docker run hello-world 12Hello from Docker!This message shows that your installation appears to be working correctly.","link":"/2020/07/18/Homebrew%E5%AE%89%E8%A3%85Docker-Desktop-for-Mac%E5%8F%8AMacOS10-15%E7%89%88%E6%9C%AC%E7%9A%84%E9%95%9C%E5%83%8F%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/"},{"title":"Eight rounding modes八种舍入模式解析","text":"读《Effective Java》Item 60 : Avoid float and double if exact answers are required的时候，结尾写BigDecimal的优点时写道 Using BigDecimal has the added advantage that it gives you full control over rounding, letting you select from eight rounding modes whenever an operation that entails rounding is performed. 这里的eight rounding modes（八种舍入模式）第一次看到，查找资料记录一下 ROUND_UP舍入远离零的舍入模式。在丢弃非零部分之前始终增加数字（始终对非零舍弃部分前面的数字加1）。即，有小数位的情况下，去掉小数位，正数+1，负数-1 ROUND_DOWN接近零的舍入模式。在丢弃某部分之前始终不增加数字（从不对舍弃部分前面的数字加1，即截短）。即，有小数位的情况下，去掉小数位，整数位不变 ROUND_CEILING接近正无穷大的舍入模式。如果 BigDecimal 为正，则舍入行为与 ROUND_UP 相同；如果为负，则舍入行为与 ROUND_DOWN 相同。即，有小数位的情况下，去掉小数位，正数+1，负数不变! ROUND_FLOOR接近负无穷大的舍入模式。如果 BigDecimal 为正，则舍入行为与 ROUND_DOWN 相同；如果为负，则舍入行为与 ROUND_UP 相同。即，有小数位的情况下，去掉小数位，正数不变，负数-1 ROUND_HALF_UP向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为向上舍入的舍入模式。如果舍弃部分 &gt;= 0.5，则舍入行为与 ROUND_UP 相同；否则舍入行为与 ROUND_DOWN 相同。即，四舍五入 ROUND_HALF_DOWN向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则为上舍入的舍入模式。如果舍弃部分 &gt; 0.5，则舍入行为与 ROUND_UP 相同；否则舍入行为与 ROUND_DOWN 相同。即，五舍六入 ROUND_HALF_EVEN向“最接近的”数字舍入，如果与两个相邻数字的距离相等，则向相邻的偶数舍入。如果舍弃部分左边的数字为奇数，则舍入行为与 ROUND_HALF_UP 相同；如果为偶数，则舍入行为与 ROUND_HALF_DOWN 相同。注意，在重复进行一系列计算时，此舍入模式可以将累加错误减到最小。此舍入模式也称为“银行家舍入法”，主要在美国使用。四舍六入，五分两种情况。如果前一位为奇数，则入位，否则舍去。以下例子为保留小数点1位，那么这种舍入方式下的结果。1.15&gt;1.2 1.25&gt;1.2 ROUND_UNNECESSARY断言请求的操作具有精确的结果，因此不需要舍入。如果对获得精确结果的操作指定此舍入模式，则抛出ArithmeticException。 参考http://www.blogjava.net/wangzc2001/archive/2010/12/17/340988.html","link":"/2020/07/23/Eight-rounding-modes%E5%85%AB%E7%A7%8D%E8%88%8D%E5%85%A5%E6%A8%A1%E5%BC%8F%E8%A7%A3%E6%9E%90/"},{"title":"Homebrew常用命令","text":"本文为Homebrew的常用命令，便于日常操作 常用命令12345678910brew help 查看帮助brew install &lt;package name&gt; 安装软件包brew uninstall &lt;package name&gt; 卸载软件包brew list [--versions] 列出已安装的软件包(包括版本)brew search &lt;package name&gt; 查找软件包brew info &lt;package name&gt; 查看软件包信息brew update 更新brewbrew outdated 列出过时的软件包（已安装但不是最新版本）brew upgrade [&lt;package name&gt;] 更新过时的软件包（不指定软件包表示更新全部）brew doctor 检查brew运行状态 常用软件1234567brew install wgetbrew install curlbrew install opensslbrew install fish #安装fish shellbrew install git-flow #安装git-flowbrew install python #安装python Homebrew-CaskHomebrew-Cask 是 Homebrew 的一个扩展。它能够优雅、简单、快速的安装和管理 macOS 图形界面程序，比如Google Chrome 和Dropbox等等。官网 https://caskroom.github.io/。 Cask 必装的理由有图形界面的软件可以直接在 App Stroe 中下载更新，为啥还需要 Cask 呢？因为有的很好用的免费 Mac 软件并没有选择在 App Store 上架，对于没有上架的软件我们只能是通过搜索找到官网然后在下载安装包，这样不够优雅也不方便管理，而使用 Cask 可以通过一行命令就搞定安装了，还可以统一更新升级所有的软件，实现从非 App Store 途径安装的软件的统一管理。Cask 从软件官方网站下载软件包，然后在后台安装并将 .app 移动到 Applications。通过 Cask 安装的软件也会在 Lanuchpad 显示，跟从 App Store 安装的软件没啥区别。对于那些收费的软件，用 Cask 安装只是比普通安装方法节省了时间和步骤，没啥其他的区别。 Cask 常用命令123456brew cask -help 查看帮助brew cask install &lt;software name&gt; 安装软件brew cask uninstall &lt;software name&gt; 卸载软件brew cask search &lt;software name&gt; 搜索软件brew cask info &lt;software name&gt; 查看软件相关信息brew cask list 列出通过 Homebrew-Cask 安装的包 经过测试，虽然 -help 是未知命令，但是仍然可查看 Cask 的命令，其他帮助命令（如 brew cask -h 和 brew cask –help）好像都不行。还有其他的命令就不一一介绍了，其他命令可以通过brew cask -help查看。 Cask 常用软件12345678910111213141516brew cask install iterm2 #安装iTerm 2brew cask install launchrocket #管理软件后台服务brew cask install google-chrome #安装Chromebrew cask install the-unarchiver #解压软件brew cask install alfred #效率软件brew cask install qq #腾讯QQbrew cask install evernote #云笔记软件brew cask install sublime-text #文本编辑器brew cask install skitch #ervernote配套的截图软件brew cask install dropbox #文件同步软件brew cask install zotero #网页收藏与文献管理软件brew cask install anki #记忆软件brew cask install virtualbox #虚拟机，可以装个Windowsbrew cask install self-control #避免分心的软件brew cask install vlc #视频软件brew cask install appcleaner #应用清理 Quick Look 系列12345brew cask install qlcolorcode #预览脚本时自动代码配色brew cask install qlstephen #预览未知拓展名的纯文本文件brew cask install qlmarkdown #预览Markdown文件brew cask install quicklook-json #预览JSON文件brew cask install quicklook-csv #预览CSV文件 Homebrew-Cask 是一个开源项目，其详细信息可以看其开源项目介绍，所支持的软件列表在这里：https://github.com/caskroom/homebrew-cask/tree/master/Casks 。如果觉得管理软件在后台运行的服务很麻烦，可以装个LaunchRocket，这也是个开源项目。关于 Quick Look 的介绍可以看这篇文章加强你的「一指禅」：Mac QuickLook「快速预览」兼容性扩展教程，同时Quick Look plugins这个开源项目列出了所有支持 Homebrew-Cask 的 Quick Look 扩展，据说支持的都是程序员必备。 轻松实现一键装机在使用 Mac 的过程中，总想着有没有方便、简单的办法实现在不同Mac 上同步开发环境的办法，今天在整理 Homebrew 使用笔记的时候突然冒出一个想法，如果我把所有的 Homebrew 安装命令列成一个清单形式，当在另一台新的 Mac 上工作时，那么就可以先装一个 Homebrew 然后将命令清单中的所有命令复制粘贴到终端中，等待命令执行完毕后，新的 Mac 的大部分开发环境就跟常用的 Mac 开发环境一致了。下面列出笔者的常用命令清单： 12345678910#安装 Homebrew/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"#安装基础套件brew install fish #安装fish shellbrew install git-flow #安装git-flowbrew install python #安装python#Homebrew-Caskbrew tap caskroom/cask 安装Cask基础软件12345678brew cask install iterm2 #安装iTerm 2brew cask install visual-studio-code#微软出品的文本编辑器，可替代 Sublime Textbrew cask install google-chrome #安装Chromebrew cask install the-unarchiver #解压软件brew cask install alfred #效率软件brew cask install qq #腾讯QQbrew cask install sourcetree #Git GUI 客户端brew cask install cheatsheet # 显示当前程序的快捷键列表，默认的快捷键是长按⌘ 参考https://www.cnblogs.com/javalouvre/p/10618340.html","link":"/2020/07/19/Homebrew%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"title":"MacOS下安装JDK并配置路径以解决Homebrew安装Maven后的Java路径不匹配问题","text":"本文记录首次安装JDK及解决Maven路径不匹配问题 安装JDK前往 Oracle官网选择对应版本下载，安装时一路Next即可 验证JDK在终端输入java -version 123java version \"1.8.0_261\"Java(TM) SE Runtime Environment (build 1.8.0_261-b12)Java HotSpot(TM) 64-Bit Server VM (build 25.261-b12, mixed mode) 表示已经安装成功，也能正常使用，但此时是没有配置路径的 Homebrew安装的maven中路径与系统Java路径不匹配 Homebrew安装maven方法可参考本人之前的安装mysql的文章 使用Homebrew安装好maven后，在终端输入mvn -v 12345Apache Maven 3.5.4 (1edded0938998edf8bf061f1ceb3cfdeccf443fe; 2018-06-18T02:33:14+08:00)Maven home: /usr/local/Cellar/maven@3.5/3.5.4_1/libexecJava version: 14.0.1, vendor: N/A, runtime: /usr/local/Cellar/openjdk/14.0.1/libexec/openjdk.jdk/Contents/HomeDefault locale: zh_CN_#Hans, platform encoding: UTF-8OS name: \"mac os x\", version: \"10.15.4\", arch: \"x86_64\", family: \"mac\" 可以看到，这里的Java版本是14.0.1，这是因为使用Homebrew安装maven的时候会一并安装最新版本的OpenJDK。因此需要我们手动配置一下。 配置Java路径 参考来源：https://www.jianshu.com/p/6831bfb8e012 在终端输入sudo vim /etc/profile按i进入insert模式，在下方加入四行配置 1234JAVA_HOME=\"/Library/Java/JavaVirtualMachines/jdk1.8.0_261.jdk/Contents/Home\"export JAVA_HOMECLASS_PATH=\"$JAVA_HOME/lib\"PATH=\".$PATH:$JAVA_HOME/bin\" 输入:wq!保存并退出 1JAVA_HOME=\"/Library/Java/JavaVirtualMachines/jdk1.8.0_261.jdk/Contents/Home\" 此处的路径可以去资源库查找自己的路径，也可以打开一个新的终端输入 /usr/libexec/java_home 然后把出现的路径复制过来就行完成上面内容后继续在终端输入 source /etc/profile 回车后即完成配置。 验证配置是否成功终端输入 echo $JAVA_HOME 出现Java路径即成功！ 配置完成后再查看maven，可发现Java已显示为自己安装的1.8版本 12345Apache Maven 3.5.4 (1edded0938998edf8bf061f1ceb3cfdeccf443fe; 2018-06-18T02:33:14+08:00)Maven home: /usr/local/Cellar/maven@3.5/3.5.4_1/libexecJava version: 1.8.0_261, vendor: Oracle Corporation, runtime: /Library/Java/JavaVirtualMachines/jdk1.8.0_261.jdk/Contents/Home/jreDefault locale: zh_CN, platform encoding: UTF-8OS name: \"mac os x\", version: \"10.15.4\", arch: \"x86_64\", family: \"mac\"","link":"/2020/08/08/MacOS%E4%B8%8B%E5%AE%89%E8%A3%85JDK%E5%B9%B6%E9%85%8D%E7%BD%AE%E8%B7%AF%E5%BE%84%E4%BB%A5%E8%A7%A3%E5%86%B3Homebrew%E5%AE%89%E8%A3%85Maven%E5%90%8E%E7%9A%84Java%E8%B7%AF%E5%BE%84%E4%B8%8D%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98/"},{"title":"Mac使用Marginnote3时，启动会自动打开固定某一个笔记解决方案","text":"本文记录使用Marginnote3时，第一次启动会固定打开某一个笔记本的解决方案 这个问题是笔记本链接的问题 打开 12~/Library/Containers/QReader.MarginStudyMac/Data/Library/Preferences~/Library/Containers/QReader.MarginStudyMac/Data/Library/SyncedPreferences 这两个目录下， 删掉“QReader.MarginStudyMac.plist”这个文件。 打开云同步再同步一遍笔记即可。","link":"/2020/07/22/Mac%E4%BD%BF%E7%94%A8Marginnote3%E6%97%B6%EF%BC%8C%E5%90%AF%E5%8A%A8%E4%BC%9A%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E5%9B%BA%E5%AE%9A%E6%9F%90%E4%B8%80%E4%B8%AA%E7%AC%94%E8%AE%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"}],"tags":[{"name":"Homebrew","slug":"Homebrew","link":"/tags/Homebrew/"},{"name":"MacOS","slug":"MacOS","link":"/tags/MacOS/"},{"name":"Java","slug":"Java","link":"/tags/Java/"}],"categories":[{"name":"工具安装及配置","slug":"工具安装及配置","link":"/categories/%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/"},{"name":"读书笔记","slug":"读书笔记","link":"/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"},{"name":"命令","slug":"命令","link":"/categories/%E5%91%BD%E4%BB%A4/"},{"name":"工具使用问题与解决方案","slug":"工具使用问题与解决方案","link":"/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"}]}